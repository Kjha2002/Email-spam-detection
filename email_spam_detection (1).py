# -*- coding: utf-8 -*-
"""Email spam detection.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xlg6-T1R2GcM3WMOgbhdQRPoUTAcnbTX
"""

# spam_detector.py

import pandas as pd
import string
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score

# Load dataset
df = pd.read_csv("/content/spam.csv", encoding='latin-1')[['v1', 'v2']]
df.columns = ['label', 'text']

# Preprocessing
df['label'] = df['label'].map({'ham': 0, 'spam': 1})

# Optional: Clean text
def clean_text(text):
    text = text.lower()
    text = ''.join([char for char in text if char not in string.punctuation])
    return text

df['text'] = df['text'].apply(clean_text)

# Split data
X = df['text']
y = df['label']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Convert text to vectors
vectorizer = CountVectorizer()
X_train_vec = vectorizer.fit_transform(X_train)
X_test_vec = vectorizer.transform(X_test)

# Train model
model = MultinomialNB()
model.fit(X_train_vec, y_train)

# Evaluate
y_pred = model.predict(X_test_vec)
print("Accuracy:", accuracy_score(y_test, y_pred))
print("Classification Report:\n", classification_report(y_test, y_pred))
print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred))

# Test with new email
def predict_spam(email):
    email = clean_text(email)
    email_vec = vectorizer.transform([email])
    prediction = model.predict(email_vec)
    return "SPAM" if prediction[0] == 1 else "HAM"

# Example
print("\nPrediction example:")
print("Message: 'Congratulations! You have won a $1000 gift card.'")
print("Prediction:", predict_spam("Congratulations! You have won a $1000 gift card."))

!pip install streamlit pyngrok --quiet

code = '''
import streamlit as st
import pandas as pd
import string
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.naive_bayes import MultinomialNB

# Load and clean dataset
df = pd.read_csv("spam.csv", encoding='latin-1')[['v1', 'v2']]
df.columns = ['label', 'text']
df['label'] = df['label'].map({'ham': 0, 'spam': 1})

def clean_text(text):
    return ''.join([c.lower() for c in text if c not in string.punctuation])

df['text'] = df['text'].apply(clean_text)

# Train model
X = df['text']
y = df['label']
vectorizer = CountVectorizer()
X_vec = vectorizer.fit_transform(X)
model = MultinomialNB()
model.fit(X_vec, y)

# Streamlit app
st.title("ðŸ“© Email Spam Detector")
msg = st.text_area("Enter message:")
if st.button("Predict"):
    cleaned = clean_text(msg)
    vec = vectorizer.transform([cleaned])
    pred = model.predict(vec)
    st.success("ðŸš¨ SPAM" if pred[0] else "âœ… HAM")
'''
with open("app.py", "w") as f:
    f.write(code)

!ngrok config add-authtoken 2vzP9vC0eyphMr2JqUloE0YBwSI_3Z1pD4Dazs7TWYVEAV6nm

from pyngrok import ngrok

# Start the tunnel with correct config for ngrok v3+
public_url = ngrok.connect("8501", "http")
print(f"Streamlit app running at: {public_url}")

# Launch the Streamlit app
!streamlit run app.py &>/content/logs.txt &

